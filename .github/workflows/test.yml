name: iOS-Test-Simulator

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag to test (e.g., v1.5)'
        required: true
        default: 'latest'

jobs:
  test-on-simulator:
    name: 🧪 Test IPA on iOS Simulator
    runs-on: macos-latest
    steps:
      - name: Download Release IPA
        run: |
          if [ "${{ github.event.inputs.version_tag }}" == "latest" ]; then
            RELEASE_URL=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/latest" | \
              jq -r '.assets[] | select(.name | endswith(".ipa")) | .browser_download_url')
          else
            RELEASE_URL=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.event.inputs.version_tag }}" | \
              jq -r '.assets[] | select(.name | endswith(".ipa")) | .browser_download_url')
          fi
          
          mkdir -p ios-app
          curl -L -o ios-app/FlutterIpaExport.ipa "$RELEASE_URL"

      - name: Extract and Prepare App
        run: |
          cd ios-app
          unzip -q FlutterIpaExport.ipa
          rm -rf Runner.app
          cp -R Payload/Runner.app ./Runner.app
          plutil -convert xml1 Runner.app/Info.plist
          
          # Only set essential plist values
          /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier com.hebrons.appointments" Runner.app/Info.plist
          chmod +x Runner.app/Runner

      - name: Setup and Test on Simulator
        id: test
        run: |
          # Cleanup and create simulator
          xcrun simctl shutdown all 2>/dev/null || true
          UDID=$(xcrun simctl create "iPhone 14" com.apple.CoreSimulator.SimDeviceType.iPhone-14 com.apple.CoreSimulator.SimRuntime.iOS-17-0)
          xcrun simctl boot "$UDID"
          
          # Install and launch app
          xcrun simctl install "$UDID" ios-app/Runner.app
          
          # Launch and monitor
          echo "Launching app..."
          xcrun simctl launch "$UDID" com.hebrons.appointments &
          
          # Quick check for crash
          sleep 5
          if xcrun simctl spawn $UDID ps aux | grep -q "[R]unner"; then
            echo "✅ App launched successfully"
            echo "test_status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ App crashed on launch"
            xcrun simctl spawn $UDID log show --predicate 'processImagePath contains "Runner"' --last 30s
            echo "test_status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Upload Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: ios-app/Runner.app/Info.plist

      - name: Cleanup
        if: always()
        run: xcrun simctl shutdown all && xcrun simctl delete all