name: iOS-Test-Simulator

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag to test (e.g., v1.5)'
        required: true
        default: 'latest'
      repository:
        description: 'Repository (e.g., owner/repo)'
        required: true
      github_token:
        description: 'GitHub Token for API access'
        required: true

jobs:
  test-on-simulator:
    name: üß™ Test IPA on iOS Simulator
    runs-on: macos-latest
    steps:
      - name: Download Release IPA
        run: |
          # Set GitHub API token for authentication
          GITHUB_TOKEN="${{ inputs.github_token }}"
          REPO="${{ inputs.repository }}"
          
          echo "Fetching release information..."
          
          if [ "${{ inputs.version_tag }}" == "latest" ]; then
            # Get latest release
            RELEASE_INFO=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$REPO/releases/latest")
          else
            # Get specific version
            RELEASE_INFO=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$REPO/releases/tags/${{ inputs.version_tag }}")
          fi
          
          # Check if release info was retrieved successfully
          if [ -z "$RELEASE_INFO" ]; then
            echo "Failed to fetch release information"
            exit 1
          fi
          
          # Extract download URL for IPA
          RELEASE_URL=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name | endswith(".ipa")) | .browser_download_url')
          
          if [ -z "$RELEASE_URL" ] || [ "$RELEASE_URL" == "null" ]; then
            echo "No IPA file found in release assets"
            echo "Available assets:"
            echo "$RELEASE_INFO" | jq -r '.assets[].name'
            exit 1
          fi
          
          echo "Downloading IPA from: $RELEASE_URL"
          mkdir -p ios-app
          curl -L -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/octet-stream" \
            -o ios-app/FlutterIpaExport.ipa "$RELEASE_URL"
          
          # Verify download
          if [ ! -f ios-app/FlutterIpaExport.ipa ]; then
            echo "Failed to download IPA file"
            exit 1
          fi
          
          echo "IPA file downloaded successfully"
          ls -lh ios-app/FlutterIpaExport.ipa

      - name: Extract IPA and Prepare for Simulator
        run: |
          cd ios-app
          unzip FlutterIpaExport.ipa
          mkdir -p Payload/Runner.app/Frameworks
          cp -r Payload/Runner.app ./Runner.app
          plutil -convert xml1 Runner.app/Info.plist
          
          # Verify app contents
          echo "App contents:"
          ls -la Runner.app/
          
          # Display bundle identifier
          echo "Bundle identifier:"
          plutil -p Runner.app/Info.plist | grep CFBundleIdentifier

      - name: Setup iOS Simulator
        run: |
          echo "Available simulator runtimes:"
          xcrun simctl list runtimes
          
          echo "Creating new simulator..."
          UDID=$(xcrun simctl create "iPhone 14" com.apple.CoreSimulator.SimDeviceType.iPhone-14 com.apple.CoreSimulator.SimRuntime.iOS-17-0)
          echo "Created simulator with UDID: $UDID"
          
          echo "Erasing simulator content and settings..."
          xcrun simctl erase "$UDID"
          
          echo "Booting simulator..."
          xcrun simctl boot "$UDID"
          echo "SIMULATOR_UDID=$UDID" >> $GITHUB_ENV
          
          # Wait for simulator to fully boot and be ready
          echo "Waiting for simulator to boot..."
          sleep 20
          
          # Verify simulator state
          echo "Checking simulator state..."
          xcrun simctl list devices | grep "$UDID"
          
          # Verify simulator is booted
          BOOT_STATUS=$(xcrun simctl list devices | grep "$UDID" | grep -c "Booted" || echo "0")
          if [ "$BOOT_STATUS" -eq "0" ]; then
            echo "Simulator failed to boot, attempting to boot again..."
            xcrun simctl boot "$UDID"
            sleep 20
          fi
          
          echo "Simulator setup complete"

      - name: Setup Simulator Permissions
        run: |
          # Get bundle ID from Info.plist
          BUNDLE_ID=$(plutil -p ios-app/Runner.app/Info.plist | grep CFBundleIdentifier | awk -F'"' '{print $4}')
          echo "Setting up permissions for bundle ID: $BUNDLE_ID"
          
          # Wait a bit more for simulator to be fully ready
          echo "Ensuring simulator is ready..."
          sleep 10
          
          # Try to set permissions but continue if it fails
          echo "Attempting to set privacy settings..."
          xcrun simctl privacy $SIMULATOR_UDID grant all $BUNDLE_ID || {
            echo "Warning: Could not set all privacy settings. This is not fatal, continuing..."
          }
          
          echo "Attempting to set notification permissions..."
          xcrun simctl privacy $SIMULATOR_UDID grant notification $BUNDLE_ID || {
            echo "Warning: Could not set notification permissions. This is not fatal, continuing..."
          }
          
          echo "Attempting to clear status bar..."
          xcrun simctl status_bar $SIMULATOR_UDID clear || {
            echo "Warning: Could not clear status bar. This is not fatal, continuing..."
          }
          
          # List current privacy settings
          echo "Current privacy settings:"
          xcrun simctl privacy $SIMULATOR_UDID || {
            echo "Warning: Could not list privacy settings"
          }

      - name: Install and Test App
        id: test
        run: |
          # Verify simulator state before installation
          echo "Verifying simulator state..."
          SIM_STATE=$(xcrun simctl list devices | grep "$SIMULATOR_UDID" | awk '{print $NF}' | tr -d '()')
          if [ "$SIM_STATE" != "Booted" ]; then
            echo "Simulator not in proper state: $SIM_STATE. Attempting to fix..."
            xcrun simctl shutdown $SIMULATOR_UDID || true
            xcrun simctl boot $SIMULATOR_UDID
            sleep 15
          fi
          
          # Clear any existing installation
          echo "Removing any existing app installation..."
          BUNDLE_ID=$(plutil -p ios-app/Runner.app/Info.plist | grep CFBundleIdentifier | awk -F'"' '{print $4}')
          xcrun simctl uninstall $SIMULATOR_UDID $BUNDLE_ID || true
          
          echo "Installing app on simulator..."
          xcrun simctl install $SIMULATOR_UDID ios-app/Runner.app || {
            echo "Installation failed. Directory contents:"
            ls -la ios-app/
            ls -la ios-app/Runner.app/
            exit 1
          }
          
          echo "Bundle ID: $BUNDLE_ID"
          
          echo "Verifying app container..."
          xcrun simctl get_app_container $SIMULATOR_UDID $BUNDLE_ID || {
            echo "Failed to find app container"
            exit 1
          }
          
          # Verify app signing and entitlements
          echo "Checking app signing and entitlements..."
          codesign -vv -d ios-app/Runner.app 2>&1 || echo "Warning: Code signing verification failed"
          
          # Check app executable permissions
          echo "Checking app executable permissions..."
          chmod +x ios-app/Runner.app/Runner
          
          # List all installed apps to verify our app is there
          echo "Listing installed apps..."
          xcrun simctl listapps $SIMULATOR_UDID
          
          # Try alternate launch methods
          echo "Attempting app launch (Method 1)..."
          xcrun simctl launch $SIMULATOR_UDID $BUNDLE_ID || {
            echo "First launch attempt failed, trying alternate method..."
            
            # Reset simulator state
            echo "Resetting simulator state..."
            xcrun simctl shutdown $SIMULATOR_UDID || true
            xcrun simctl boot $SIMULATOR_UDID
            sleep 15
            
            echo "Attempting app launch (Method 2)..."
            xcrun simctl openurl $SIMULATOR_UDID "hebrons-appointments://" || {
              echo "Second launch attempt failed, trying final method..."
              
              echo "Attempting app launch (Method 3)..."
              open -a Simulator
              sleep 5
              xcrun simctl launch $SIMULATOR_UDID $BUNDLE_ID || {
                echo "All launch attempts failed. System log:"
                xcrun simctl spawn $SIMULATOR_UDID log show --predicate 'processImagePath contains "Runner"' --last 2m
                echo "Simulator status:"
                xcrun simctl list devices | grep "$SIMULATOR_UDID"
                exit 1
              }
            }
          }
          
          # Capture logs
          mkdir -p test-results
          xcrun simctl spawn $SIMULATOR_UDID log stream --predicate 'processImagePath contains "Runner"' > test-results/app.log &
          LOG_PID=$!
          
          # Monitor app
          echo "Monitoring app for 30 seconds..."
          sleep 30
          
          # Kill log process
          kill $LOG_PID || true
          
          # Capture system log
          xcrun simctl spawn $SIMULATOR_UDID log show --predicate 'processImagePath contains "Runner"' > test-results/system.log
          
          # Check app status
          if xcrun simctl spawn $SIMULATOR_UDID ps aux | grep -q "[R]unner"; then
            echo "‚úÖ App is running successfully"
            echo "test_status=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå App crashed or failed to launch"
            cat test-results/system.log
            echo "test_status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Debug Info
        if: failure()
        run: |
          echo "Simulator status:"
          xcrun simctl list devices | grep "iPhone 14"
          
          echo "App installation status:"
          BUNDLE_ID=$(plutil -p ios-app/Runner.app/Info.plist | grep CFBundleIdentifier | awk -F'"' '{print $4}')
          xcrun simctl get_app_container $SIMULATOR_UDID $BUNDLE_ID || echo "App container not found"
          
          echo "System log:"
          xcrun simctl spawn $SIMULATOR_UDID log show --last 2m
          
          echo "App entitlements:"
          codesign -d --entitlements :- ios-app/Runner.app

      - name: Capture Screenshots
        if: always()
        run: |
          xcrun simctl io $SIMULATOR_UDID screenshot test-results/final_state.png

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            test-results/*
            ios-app/Runner.app/Info.plist

      - name: Clean Up
        if: always()
        run: |
          xcrun simctl shutdown $SIMULATOR_UDID
          xcrun simctl delete $SIMULATOR_UDID

      - name: Report Test Status
        if: always()
        run: |
          if [ "${{ steps.test.outputs.test_status }}" == "success" ]; then
            echo "Test completed successfully! ‚úÖ"
          else
            echo "Test failed! ‚ùå"
            exit 1
          fi