name: iOS-Test-Simulator

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag to test (e.g., v1.5)'
        required: true
        default: 'latest'

jobs:
  test-simulator:
    name: 🔄 Simulator Test
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.1'
          channel: 'stable'

      - name: Setup Firebase Configuration
        env:
          GOOGLE_SERVICE_INFO_PLIST: ${{ secrets.GOOGLE_SERVICE_INFO_PLIST_BASE64 }}
        run: |
          echo "Setting up Firebase configuration..."
          echo "$GOOGLE_SERVICE_INFO_PLIST" | base64 --decode > ios/Runner/GoogleService-Info.plist
          
          if [ ! -f "ios/Runner/GoogleService-Info.plist" ]; then
            echo "❌ Failed to create GoogleService-Info.plist"
            exit 1
          fi
          
          echo "✅ Firebase configuration created successfully"
          ls -la ios/Runner/GoogleService-Info.plist

      - name: Setup Ruby and CocoaPods
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Flutter Setup
        run: |
          flutter clean
          flutter pub get
          
      - name: Pod Install
        run: |
          cd ios
          rm -rf Pods Podfile.lock
          pod repo update
          pod install --repo-update
          
      - name: Debug Info
        run: |
          flutter doctor -v
          xcodebuild -showsdks
          xcrun simctl list devices
          echo "Checking Firebase config..."
          ls -la ios/Runner/GoogleService-Info.plist || echo "Firebase config missing!"

      - name: Build for Simulator
        run: |
          flutter build ios --simulator --no-codesign --debug
          
      - name: Prepare Simulator
        id: simulator
        run: |
          # Shutdown existing simulators
          xcrun simctl shutdown all 2>/dev/null || true
          
          # List available runtimes
          echo "Available iOS runtimes:"
          xcrun simctl list runtimes
          
          # Create and boot simulator
          UDID=$(xcrun simctl create "iOS-Simulator" \
            com.apple.CoreSimulator.SimDeviceType.iPhone-14 \
            com.apple.CoreSimulator.SimRuntime.iOS-17-0 || \
            xcrun simctl create "iOS-Simulator" \
            com.apple.CoreSimulator.SimDeviceType.iPhone-14 \
            com.apple.CoreSimulator.SimRuntime.iOS-16-4)
            
          echo "Created simulator with UDID: $UDID"
          xcrun simctl boot "$UDID"
          
          # Wait for simulator to boot
          echo "Waiting for simulator to boot..."
          sleep 15
          
          # Verify simulator status
          xcrun simctl list devices | grep "$UDID"
          
          echo "udid=$UDID" >> $GITHUB_OUTPUT

      - name: Install App
        run: |
          APP_PATH="build/ios/iphonesimulator/Runner.app"
          if [ ! -d "$APP_PATH" ]; then
            echo "❌ App not found at $APP_PATH"
            echo "Contents of build/ios:"
            ls -R build/ios/ || true
            exit 1
          fi
          
          echo "Verifying app bundle..."
          ls -la "$APP_PATH"
          
          echo "Checking for Firebase config in app bundle..."
          ls -la "$APP_PATH/GoogleService-Info.plist" || echo "Firebase config not in app bundle!"
          
          echo "Installing app to simulator..."
          xcrun simctl install ${{ steps.simulator.outputs.udid }} "$APP_PATH"

      - name: Test App Launch
        id: app_test
        run: |
          echo "Launching app..."
          xcrun simctl launch --console-pty ${{ steps.simulator.outputs.udid }} com.hebrons.appointments &
          
          # Wait for app to launch
          echo "Waiting for app initialization..."
          sleep 15
          
          # Check if app is running
          if xcrun simctl spawn ${{ steps.simulator.outputs.udid }} ps aux | grep -q "[R]unner"; then
            echo "✅ App launched successfully"
            echo "test_status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ App crashed on launch"
            echo "Fetching system logs..."
            xcrun simctl spawn ${{ steps.simulator.outputs.udid }} log show --predicate 'processImagePath contains "Runner"' --last 2m
            echo "Fetching crash logs..."
            xcrun simctl spawn ${{ steps.simulator.outputs.udid }} crash list
            echo "Checking Firebase config presence..."
            ls -la ios/Runner/GoogleService-Info.plist || echo "Firebase config missing!"
            exit 1
          fi

      - name: Collect Debug Info on Failure
        if: failure()
        run: |
          echo "Creating debug artifacts directory..."
          mkdir -p debug_artifacts
          
          echo "Collecting simulator status..."
          xcrun simctl list devices > debug_artifacts/simulator_devices.txt
          
          echo "Collecting crash reports..."
          cp -r ~/Library/Logs/DiagnosticReports/* debug_artifacts/ || true
          
          echo "Collecting system logs..."
          xcrun simctl spawn ${{ steps.simulator.outputs.udid }} log show --last 2m > debug_artifacts/simulator.log
          
          echo "Collecting app sandbox info..."
          xcrun simctl get_app_container ${{ steps.simulator.outputs.udid }} com.hebrons.appointments > debug_artifacts/app_container.txt || true
          
          echo "Checking app installation..."
          ls -la build/ios/iphonesimulator/Runner.app > debug_artifacts/app_contents.txt || true
          
          echo "Collecting Firebase config status..."
          ls -la ios/Runner/GoogleService-Info.plist > debug_artifacts/firebase_config.txt || true

      - name: Upload Debug Artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: debug-artifacts
          path: debug_artifacts
