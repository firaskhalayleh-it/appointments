name: Flutter CI/CD

on:
  # Adjust if your default branch is "main". Otherwise, keep "master" if that's truly your active branch.
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    name: Run Flutter Tests
    runs-on: ubuntu-latest
    
    steps:
      # ----- 1. Checkout the repository -----
      - name: Check out code
        uses: actions/checkout@v4
        with:
          # Setting fetch-depth to 0 fetches all history so you can do full clones or other Git operations
          fetch-depth: 0

      # ----- 2. Set up Java JDK 17 -----
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      
      # ----- 3. Set up Flutter -----
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.3'  # Updated to match your environment (includes Dart 3.6.1)
          channel: 'stable'
          cache: true

      # ----- 4. Get dependencies -----
      - name: Get dependencies
        run: flutter pub get

      # ----- 5. Run tests -----
      - name: Run tests
        run: flutter test

  build:
    name: Build Flutter APK
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      # ----- 1. Checkout the repository again -----
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ----- 2. Set up Java JDK 17 -----
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      
      # ----- 3. Set up Flutter -----
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.3'  # Updated to match your environment (includes Dart 3.6.1)
          channel: 'stable'
          cache: true
      
      # ----- 4. Clean and get dependencies -----
      - name: Clean and get dependencies
        run: |
          flutter clean
          flutter pub get

      # ----- 5. Decode base64 key.properties and keystore files -----
      - name: Decode android key.properties
        # Make sure you have stored your KEY_PROPERTIES and KEYSTORE in Actions secrets
        run: |
          mkdir -p android/app
          echo "${{ secrets.KEY_PROPERTIES }}" > android/key.properties
          echo "${{ secrets.KEYSTORE }}" > android/app/my-release-key.jks.base64
          base64 -d android/app/my-release-key.jks.base64 > android/app/my-release-key.jks

      # ----- 6. Extract version from pubspec -----
      - name: Extract version from pubspec
        id: version
        run: |
          VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //' | tr -d ' ')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version extracted: $VERSION"

      # ----- 7. Build APK (release mode) -----
      - name: Build APK
        run: flutter build apk --release
        
      # ----- 8. Validate APK file existence -----  
      - name: Validate APK
        run: |
          if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            echo "APK built successfully"
          else
            echo "APK build failed"
            exit 1
          fi

      # ----- 9. Upload APK as an artifact -----
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: release-apk-${{ env.VERSION }}
          path: build/app/outputs/flutter-apk/app-release.apk
          retention-days: 7

      # ----- 10. Create a GitHub Release with the built APK -----
      - name: Create Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          files: build/app/outputs/flutter-apk/app-release.apk
          tag_name: v${{ env.VERSION }}-${{ github.run_number }}
          name: Release v${{ env.VERSION }}-${{ github.run_number }}
          body: |
            ## Release Notes
            - Build: ${{ github.run_number }}
            - Commit: ${{ github.sha }}
            
            This is an automated release from GitHub Actions.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
