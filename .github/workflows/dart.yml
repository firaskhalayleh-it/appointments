name: iOS-ipa-build
on:
  workflow_dispatch:

jobs:
  # --- Job 1: Detect iOS SDK, run tests, etc. ---
  test-and-check:
    name: ‚úÖ Test and iOS Version Check
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.1'
          channel: 'stable'
          
      # Verify Flutter installation and path
      - name: Verify Flutter Installation
        run: |
          flutter doctor -v
          echo "FLUTTER_ROOT=$FLUTTER_ROOT" >> $GITHUB_ENV
          
      # STEP 1: Detect iOS SDK version
      - name: Find iOS SDK version
        id: find-ios-sdk
        run: |
          ios_sdk=$(xcodebuild -showsdks | grep -E "iOS [0-9\.]+" | head -1 | sed -E "s/.*iOS ([0-9\.]+).*/\1/")
          echo "Found iOS SDK version: $ios_sdk"
          echo "sdk_version=$ios_sdk" >> $GITHUB_OUTPUT
          
      # CACHE STEP #1: Cache Flutter/Dart packages
      - name: Cache pub dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pubcache-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pubcache-
            
      - name: Flutter Pub Get
        run: |
          flutter clean
          flutter pub get
        
      # Optional: Show iOS SDKs for debugging
      - name: Show iOS SDKs
        run: xcodebuild -showsdks
        
      # Use script to ensure test directory
      - name: Ensure test directory
        run: |
          chmod +x setup_tests.sh
          ./setup_tests.sh
        shell: bash
        
      # Run Flutter tests
      - name: Run Flutter Tests
        run: flutter test

  # --- Job 2: Build and export IPA ---
  build-ios:
    runs-on: macos-latest
    needs: test-and-check
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.1'
          channel: 'stable'
          
      # Verify Flutter installation and path
      - name: Verify Flutter Installation
        run: |
          flutter doctor -v
          echo "FLUTTER_ROOT=$FLUTTER_ROOT" >> $GITHUB_ENV
          
      - name: Setup Ruby and CocoaPods
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          
      - name: Install CocoaPods
        run: gem install cocoapods
        
      - name: Cache CocoaPods Installation
        uses: actions/cache@v3
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-
            
      - name: Flutter Pub Get
        run: |
          flutter clean
          flutter pub get
          
      - name: Pod Install
        run: |
          cd ios
          rm -rf Pods Podfile.lock
          pod install --repo-update
        
      - name: Build iOS Release
        run: flutter build ios --release --no-codesign
        
      - name: Create Payload Directory
        run: mkdir Payload
        working-directory: build/ios/iphoneos
        
      - name: Move App into Payload
        run: mv Runner.app Payload
        working-directory: build/ios/iphoneos
        
      - name: Zip IPA
        run: zip -qq -r -9 FlutterIpaExport.ipa Payload
        working-directory: build/ios/iphoneos

      # Upload IPA as artifact for testing job
      - name: Upload IPA for Testing
        uses: actions/upload-artifact@v3
        with:
          name: ios-app
          path: build/ios/iphoneos/FlutterIpaExport.ipa
        
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/ios/iphoneos/FlutterIpaExport.ipa
          tag: v1.5.1
          overwrite: true
          body: "Built with auto-detected iOS SDK version"

  # --- Job 3: Test IPA on Simulator ---
  test-ipa:
    name: üß™ Test IPA on Simulator
    needs: build-ios
    runs-on: macos-latest
    steps:
      - name: Download IPA
        uses: actions/download-artifact@v3
        with:
          name: ios-app
          path: ios-app

      - name: Setup iOS Simulator
        run: |
          # Create and boot iPhone 14 simulator
          UDID=$(xcrun simctl create "iPhone 14" com.apple.CoreSimulator.SimDeviceType.iPhone-14 com.apple.CoreSimulator.SimRuntime.iOS-17-0)
          xcrun simctl boot "$UDID"
          echo "SIMULATOR_UDID=$UDID" >> $GITHUB_ENV
          
          # Wait for simulator to fully boot
          sleep 10

      - name: Install and Test App
        run: |
          echo "Installing app on simulator..."
          xcrun simctl install $SIMULATOR_UDID ios-app/FlutterIpaExport.ipa
          
          echo "Launching app..."
          xcrun simctl launch $SIMULATOR_UDID com.hebrons.appointments
          
          # Start logging
          echo "Starting log capture..."
          xcrun simctl spawn $SIMULATOR_UDID log stream --predicate 'processImagePath contains "appointments"' > app.log &
          LOG_PID=$!
          
          # Monitor app for 30 seconds
          echo "Monitoring app for 30 seconds..."
          sleep 30
          
          # Check if app is still running
          if xcrun simctl spawn $SIMULATOR_UDID ps aux | grep -q "appointments"; then
            echo "‚úÖ App is running successfully"
            kill $LOG_PID
            exit 0
          else
            echo "‚ùå App crashed or failed to launch"
            kill $LOG_PID
            exit 1
          fi

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-logs
          path: |
            app.log
            ~/Library/Logs/CoreSimulator/**/system.log