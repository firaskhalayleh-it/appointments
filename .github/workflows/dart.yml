name: iOS-ipa-build
on:
  workflow_dispatch:

jobs:
  test-and-check:
    name: âœ… Test and iOS Version Check
    runs-on: macos-latest
    outputs:
      tests_passed: ${{ steps.test_status.outputs.passed }}
    steps:
      - uses: actions/checkout@v3

      - name: Check Test Cache
        id: test_cache
        uses: actions/cache@v3
        with:
          path: |
            .test_status
          key: test-status-${{ github.sha }}

      - name: Check Cached Test Status
        id: test_status
        if: steps.test_cache.outputs.cache-hit == 'true'
        run: |
          if [ -f .test_status ] && [ "$(cat .test_status)" == "passed" ]; then
            echo "Tests previously passed, skipping..."
            echo "passed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "passed=false" >> $GITHUB_OUTPUT

      - name: Setup Flutter
        if: steps.test_status.outputs.passed != 'true'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.1"
          channel: "stable"

      - name: Verify Flutter Installation
        if: steps.test_status.outputs.passed != 'true'
        run: |
          flutter doctor -v

      - name: Cache pub dependencies
        if: steps.test_status.outputs.passed != 'true'
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.FLUTTER_HOME }}/.pub-cache
            **/.dart_tool
            **/.flutter-plugins
            **/.flutter-plugins-dependencies
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Flutter Pub Get
        if: steps.test_status.outputs.passed != 'true'
        run: |
          flutter clean
          flutter pub get

      - name: Run Flutter Tests
        if: steps.test_status.outputs.passed != 'true'
        run: |
          flutter test || echo "No tests found"
          echo "passed" > .test_status

  build-ios:
    runs-on: macos-latest
    needs: test-and-check
    if: always()
    steps:
      - uses: actions/checkout@v3

      - name: Setup Firebase Config
        env:
          FIREBASE_CONFIG_BASE64: ${{ secrets.GOOGLE_SERVICE_INFO_PLIST_BASE64 }}
        run: |
          echo "Setting up Firebase configuration..."
          echo "$FIREBASE_CONFIG_BASE64" | base64 --decode > ios/Runner/GoogleService-Info.plist

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.1"
          channel: "stable"
      - name: Add Firebase SDK Package
        run: |
            cd ios
            cat << 'EOF' > firebase_package.rb
            require 'xcodeproj'
            
            begin
              project_path = 'Runner.xcodeproj'
              project = Xcodeproj::Project.open(project_path)
              
              # Get the main target
              target = project.targets.first
              puts "Found target: #{target.name}"
              
              # Add Swift Package dependency
              package_configs = {
                'name' => 'firebase-ios-sdk',
                'url' => 'https://github.com/firebase/firebase-ios-sdk',
                'version' => '10.20.0'
              }
              
              # Create a package reference group if it doesn't exist
              package_group = project.main_group.find_subpath('Packages', true)
              package_group.set_source_tree('SOURCE_ROOT')
              
              # Create Swift Package reference
              ref = package_group.new_file("#{package_configs['url']}")
              ref.last_known_file_type = 'wrapper.pb-project'
              ref.set_source_tree('SOURCE_ROOT')
              
              # Add Swift Package Manager build settings
              project.targets.each do |target|
                target.build_configurations.each do |config|
                  if config.build_settings['SWIFT_VERSION'].nil?
                    config.build_settings['SWIFT_VERSION'] = '5.0'
                  end
                  
                  # Enable SPM
                  config.build_settings['SWIFT_PACKAGE_MANAGER'] = true
                  
                  # Add package path
                  if config.build_settings['SWIFT_PACKAGE_PATHS'].nil?
                    config.build_settings['SWIFT_PACKAGE_PATHS'] = ['$(SRCROOT)/Packages']
                  else
                    config.build_settings['SWIFT_PACKAGE_PATHS'] << '$(SRCROOT)/Packages'
                  end
                end
              end
              
              # Save the project
              project.save
              
              puts "Successfully added Firebase SDK package"
            rescue => e
              puts "Error: #{e.message}"
              puts e.backtrace
              exit 1
            end
            EOF
            
            ruby firebase_package.rb
            
            # Create Package.swift
            cat << 'EOF' > Package.swift
            // swift-tools-version:5.5
            import PackageDescription
  
            let package = Package(
                name: "Runner",
                platforms: [
                    .iOS(.v13)
                ],
                products: [
                    .library(
                        name: "Runner",
                        targets: ["Runner"]
                    )
                ],
                dependencies: [
                    .package(
                        url: "https://github.com/firebase/firebase-ios-sdk.git",
                        .upToNextMajor(from: "10.20.0")
                    )
                ],
                targets: [
                    .target(
                        name: "Runner",
                        dependencies: [
                            .product(name: "FirebaseAuth", package: "firebase-ios-sdk"),
                            .product(name: "FirebaseFirestore", package: "firebase-ios-sdk"),
                            .product(name: "FirebaseStorage", package: "firebase-ios-sdk")
                        ]
                    )
                ]
            )
            EOF
            
            # Create Sources directory structure
            mkdir -p Sources/Runner
  
        
      - name: Update Package Dependencies
        run: |
            cd ios
            xcodebuild -resolvePackageDependencies \
              -workspace Runner.xcworkspace \
              -scheme Runner \
              -clonedSourcePackagesDirPath SourcePackages

      - name: Setup Ruby and CocoaPods
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: true

      - name: Install xcodeproj gem
        run: |
          gem install xcodeproj

      - name: Pod Install
        run: |
          cd ios
          rm -rf Pods Podfile.lock
          pod repo update
          pod install --repo-update
        env:
          LANG: en_US.UTF-8
          FLUTTER_ROOT: ${{ env.FLUTTER_ROOT }}

      - name: Debug Environment
        run: |
          echo "Checking Firebase config:"
          ls -la ios/Runner/GoogleService-Info.plist || echo "Firebase config missing!"
          echo "Checking project configuration:"
          ls -la ios/Runner.xcodeproj

      - name: Build iOS Release
        if: steps.build_cache.outputs.cache-hit != 'true'
        run: |
          flutter build ios --release --no-codesign

          cd build/ios/iphoneos
          mkdir -p Payload
          mv Runner.app Payload/
          zip -r FlutterIpaExport.ipa Payload
        env:
          DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
          FLUTTER_ROOT: ${{ env.FLUTTER_ROOT }}

      # Rest of the steps remain the same...
