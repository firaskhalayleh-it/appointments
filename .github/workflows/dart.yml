name: iOS-ipa-build
on:
  workflow_dispatch:

jobs:
  test-and-check:
    name: âœ… Test and iOS Version Check
    runs-on: macos-latest
    outputs:
      tests_passed: ${{ steps.test_status.outputs.passed }}
    steps:
      - uses: actions/checkout@v3
      
      # Use script to ensure test directory
      - name: Ensure test directory
        id: test_cache
        run: |
          chmod +x setup_tests.sh
          ./setup_tests.sh
        shell: bash
          
      - name: Check Cached Test Status
        id: test_status
        if: steps.test_cache.outputs.cache-hit == 'true'
        run: |
          if [ -f .test_status ] && [ "$(cat .test_status)" == "passed" ]; then
            echo "Tests previously passed, skipping..."
            echo "passed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "passed=false" >> $GITHUB_OUTPUT

      # Only run tests if not cached as passed
      - name: Setup Flutter
        if: steps.test_status.outputs.passed != 'true'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.1'
          channel: 'stable'
          
      - name: Cache pub dependencies
        if: steps.test_status.outputs.passed != 'true'
        uses: actions/cache@v3
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pubcache-${{ hashFiles('pubspec.lock') }}
          restore-keys: ${{ runner.os }}-pubcache-
            
      - name: Flutter Pub Get
        if: steps.test_status.outputs.passed != 'true'
        run: flutter pub get
        
      - name: Run Flutter Tests
        if: steps.test_status.outputs.passed != 'true'
        run: |
          flutter test
          echo "passed" > .test_status

  build-ios:
    runs-on: macos-latest
    needs: test-and-check
    if: needs.test-and-check.outputs.tests_passed != 'true'
    outputs:
      build_success: ${{ steps.build_status.outputs.success }}
    steps:
      - uses: actions/checkout@v3
      
      # Check if build exists
      - name: Check Build Cache
        id: build_cache
        uses: actions/cache@v3
        with:
          path: |
            build/ios/iphoneos/FlutterIpaExport.ipa
          key: ios-build-${{ github.sha }}
          
      - name: Skip if Build Exists
        if: steps.build_cache.outputs.cache-hit == 'true'
        run: |
          echo "Build already exists, skipping..."
          echo "success=true" >> $GITHUB_OUTPUT
          exit 0
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.1'
          channel: 'stable'
          
      - name: Cache CocoaPods Installation
        uses: actions/cache@v3
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: ${{ runner.os }}-pods-
            
      - name: Flutter and Pod Install
        run: |
          flutter pub get
          cd ios && pod install --repo-update
        
      - name: Build iOS Release
        id: build_status
        run: |
          flutter build ios --release --no-codesign
          cd build/ios/iphoneos
          mkdir Payload
          mv Runner.app Payload
          zip -qq -r -9 FlutterIpaExport.ipa Payload
          echo "success=true" >> $GITHUB_OUTPUT

      - name: Upload IPA
        uses: actions/upload-artifact@v3
        with:
          name: ios-app
          path: build/ios/iphoneos/FlutterIpaExport.ipa
        
      - name: Upload to Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/ios/iphoneos/FlutterIpaExport.ipa
          tag: v1.5.${{ github.run_number }}.${{ github.run_attempt }}
          overwrite: true
