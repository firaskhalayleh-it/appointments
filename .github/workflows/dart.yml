name: iOS-ipa-build
on:
  workflow_dispatch:

jobs:
  test-and-check:
    name: âœ… Test and iOS Version Check
    runs-on: macos-latest
    outputs:
      tests_passed: ${{ steps.test_status.outputs.passed }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Check Test Cache
        id: test_cache
        uses: actions/cache@v3
        with:
          path: |
            .test_status
          key: test-status-${{ github.sha }}
          
      - name: Check Cached Test Status
        id: test_status
        if: steps.test_cache.outputs.cache-hit == 'true'
        run: |
          if [ -f .test_status ] && [ "$(cat .test_status)" == "passed" ]; then
            echo "Tests previously passed, skipping..."
            echo "passed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "passed=false" >> $GITHUB_OUTPUT

      - name: Setup Flutter
        if: steps.test_status.outputs.passed != 'true'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.1'
          channel: 'stable'
          
      - name: Verify Flutter Installation
        if: steps.test_status.outputs.passed != 'true'
        run: |
          flutter doctor -v
          
      - name: Cache pub dependencies
        if: steps.test_status.outputs.passed != 'true'
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.FLUTTER_HOME }}/.pub-cache
            **/.dart_tool
            **/.flutter-plugins
            **/.flutter-plugins-dependencies
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-
            
      - name: Flutter Pub Get
        if: steps.test_status.outputs.passed != 'true'
        run: |
          flutter clean
          flutter pub get
          
      - name: Run Flutter Tests
        if: steps.test_status.outputs.passed != 'true'
        run: |
          flutter test || echo "No tests found"
          echo "passed" > .test_status

  # Previous jobs remain the same...

  # Previous jobs remain the same...

  build-ios:
    runs-on: macos-latest
    needs: test-and-check
    if: always()
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Firebase Config
        env:
          FIREBASE_CONFIG_BASE64: ${{ secrets.GOOGLE_SERVICE_INFO_PLIST_BASE64 }}
        run: |
          echo "Setting up Firebase configuration..."
          echo "$FIREBASE_CONFIG_BASE64" | base64 --decode > ios/Runner/GoogleService-Info.plist
          
      - name: Setup Flutter
        if: steps.build_cache.outputs.cache-hit != 'true'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.1'
          channel: 'stable'
          
      - name: Add Firebase SDK Package
        run: |
          cd ios
          # Add Firebase SDK using Swift Package Manager
          cat << 'EOF' > firebase_package.rb
          require 'xcodeproj'
          
          project_path = 'Runner.xcodeproj'
          project = Xcodeproj::Project.open(project_path)
          
          # Add Swift Package
          package_url = 'https://github.com/firebase/firebase-ios-sdk'
          package_requirement = XCRemoteSwiftPackageReference::VersionRequirement.new('.upToNextMajor', '10.20.0')
          package_ref = XCRemoteSwiftPackageReference.new(project,
            repositoryURL: package_url,
            requirement: package_requirement)
          
          # Add to project
          project.root_object.package_references << package_ref
          
          # Save changes
          project.save
          EOF
          
          ruby firebase_package.rb
          
      - name: Setup Ruby and CocoaPods
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          
      - name: Install xcodeproj gem
        run: |
          gem install xcodeproj
          
      - name: Pod Install
        run: |
          cd ios
          rm -rf Pods Podfile.lock
          pod repo update
          pod install --repo-update
        env:
          LANG: en_US.UTF-8
          FLUTTER_ROOT: ${{ env.FLUTTER_ROOT }}
          
      - name: Debug Environment
        run: |
          echo "Checking Firebase config:"
          ls -la ios/Runner/GoogleService-Info.plist || echo "Firebase config missing!"
          echo "Checking project configuration:"
          ls -la ios/Runner.xcodeproj
          
      - name: Build iOS Release
        if: steps.build_cache.outputs.cache-hit != 'true'
        run: |
          flutter build ios --release --no-codesign
          
          cd build/ios/iphoneos
          mkdir -p Payload
          mv Runner.app Payload/
          zip -r FlutterIpaExport.ipa Payload
        env:
          DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
          FLUTTER_ROOT: ${{ env.FLUTTER_ROOT }}

      # Rest of the steps remain the same...