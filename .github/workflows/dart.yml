name: iOS-ipa-build
on:
  workflow_dispatch:

jobs:
  test-and-check:
    name: ✅ Test and iOS Version Check
    runs-on: macos-latest
    outputs:
      tests_passed: ${{ steps.test_status.outputs.passed }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Check Test Cache
        id: test_cache
        uses: actions/cache@v3
        with:
          path: |
            .test_status
          key: test-status-${{ github.sha }}
          
      - name: Check Cached Test Status
        id: test_status
        if: steps.test_cache.outputs.cache-hit == 'true'
        run: |
          if [ -f .test_status ] && [ "$(cat .test_status)" == "passed" ]; then
            echo "Tests previously passed, skipping..."
            echo "passed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "passed=false" >> $GITHUB_OUTPUT

      - name: Setup Flutter
        if: steps.test_status.outputs.passed != 'true'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.1'
          channel: 'stable'
          
      - name: Flutter Setup
        if: steps.test_status.outputs.passed != 'true'
        run: |
          flutter clean
          flutter pub get
          flutter doctor -v
          
      - name: Run Flutter Tests
        if: steps.test_status.outputs.passed != 'true'
        run: |
          flutter test || echo "No tests found"
          echo "passed" > .test_status

  build-ios:
    runs-on: macos-latest
    needs: test-and-check
    if: always()
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.1'
          channel: 'stable'

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Install Dependencies
        run: |
          gem install xcodeproj
          flutter pub get

      - name: Setup Firebase Configuration
        env:
          FIREBASE_CONFIG_BASE64: ${{ secrets.GOOGLE_SERVICE_INFO_PLIST_BASE64 }}
        run: |
          echo "Setting up Firebase configuration..."
          echo "$FIREBASE_CONFIG_BASE64" | base64 --decode > ios/Runner/GoogleService-Info.plist
          
          if [ ! -f "ios/Runner/GoogleService-Info.plist" ]; then
            echo "❌ Failed to create GoogleService-Info.plist"
            exit 1
          fi
          echo "✅ Firebase configuration created successfully"

      - name: Update Podfile
        run: |
          cd ios
          cat << 'EOF' > Podfile
          platform :ios, '13.0'

          ENV['COCOAPODS_DISABLE_STATS'] = 'true'
          source 'https://cdn.cocoapods.org/'

          def flutter_root
            generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
            unless File.exist?(generated_xcode_build_settings_path)
              raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
            end

            File.foreach(generated_xcode_build_settings_path) do |line|
              matches = line.match(/FLUTTER_ROOT\=(.*)/)
              return matches[1].strip if matches
            end
            raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}"
          end

          require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

          target 'Runner' do
            use_frameworks!
            use_modular_headers!

            flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
            
            # Firebase pods
            pod 'Firebase/Core'
            pod 'Firebase/Auth'
            pod 'Firebase/Firestore'
            pod 'Firebase/Storage'
          end

          post_install do |installer|
            installer.pods_project.targets.each do |target|
              flutter_additional_ios_build_settings(target)
              target.build_configurations.each do |config|
                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
                config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
                config.build_settings['ENABLE_BITCODE'] = 'NO'
              end
            end
          end
          EOF

      - name: Pod Install
        run: |
          cd ios
          rm -rf Pods Podfile.lock
          pod repo update
          pod install --repo-update
        env:
          LANG: en_US.UTF-8
          FLUTTER_ROOT: ${{ env.FLUTTER_ROOT }}

      - name: Build iOS Release
        run: |
          flutter build ios --release --no-codesign
          
          cd build/ios/iphoneos
          mkdir -p Payload
          mv Runner.app Payload/
          zip -r FlutterIpaExport.ipa Payload
        env:
          DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
          FLUTTER_ROOT: ${{ env.FLUTTER_ROOT }}

      - name: Upload IPA as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ios-app
          path: build/ios/iphoneos/FlutterIpaExport.ipa
          
      - name: Create Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/ios/iphoneos/FlutterIpaExport.ipa
          tag: v1.5.${{ github.run_number }}.${{ github.run_attempt }}
          overwrite: true
          body: "Release v1.5.${{ github.run_number }}.${{ github.run_attempt }}"