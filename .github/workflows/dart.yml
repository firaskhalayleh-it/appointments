name: iOS-ipa-build

on:
  workflow_dispatch:

jobs:
  # --- Job 1: Detect iOS SDK, run tests, etc. ---
  test-and-check:
    name: âœ… Test and iOS Version Check
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          architecture: x64

      # -------------------------------------------------------------
      # STEP 1: Detect iOS SDK version
      # -------------------------------------------------------------
      - name: Find iOS SDK version
        id: find-ios-sdk
        run: |
          # Example line from xcodebuild -showsdks: "iOS 17.5 -sdk iphoneos17.5"
          # We want to extract just "17.5" (or whatever version is installed).
          ios_sdk=$(xcodebuild -showsdks \
            | grep -E "iOS [0-9\.]+" \
            | head -1 \
            | sed -E "s/.*iOS ([0-9\.]+).*/\1/")
          
          echo "Found iOS SDK version: $ios_sdk"
          echo "sdk_version=$ios_sdk" >> $GITHUB_OUTPUT

      # -------------------------------------------------------------
      # STEP 2: Update Podfile to match the detected iOS SDK version
      # -------------------------------------------------------------
      - name: Update Podfile Platform
        run: |
          IOS_SDK_VERSION="${{ steps.find-ios-sdk.outputs.sdk_version }}"
          
          if [ -z "$IOS_SDK_VERSION" ]; then
            echo "No iOS SDK version found. Skipping Podfile update..."
          else
            echo "Setting iOS platform to $IOS_SDK_VERSION in Podfile..."
            # Replace the line starting with `platform :ios,` with the new version
            sed -i.bak "s/^platform :ios, .*/platform :ios, '$IOS_SDK_VERSION'/" ios/Podfile || true
            echo "Updated Podfile:"
            cat ios/Podfile
          fi

      # -------------------------------------------------------------
      # CACHE STEP #1: Cache Flutter/Dart packages (~/.pub-cache)
      # -------------------------------------------------------------
      - name: Cache pub dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
          key: ${{ runner.os }}-pubcache-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pubcache-

      - name: Flutter Pub Get
        run: flutter pub get

      # Optional: Show iOS SDKs for debugging
      - name: Show iOS SDKs
        run: xcodebuild -showsdks

      # If there's no 'test' directory, create it and add a placeholder test
      - name: Ensure test directory
        run: |
          if [ ! -d "test" ]; then
            echo "No 'test' directory found. Creating one..."
            mkdir test
            cat <<EOF > test/placeholder_test.dart
import 'package:flutter_test/flutter_test.dart';

void main() {
  test('placeholder test', () {
    expect(true, isTrue);
  });
}
EOF
          fi

      # Run Flutter tests
      - name: Run Flutter Tests
        run: flutter test

  # --- Job 2: Build and export IPA ---
  build-ios:
    name: ðŸŽ‰ iOS Build
    runs-on: macos-latest
    needs: test-and-check   # Only runs if tests pass
    steps:
      - uses: actions/checkout@v3

      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          architecture: x64

      # -------------------------------------------------------------
      # CACHE STEP #2: Cache CocoaPods (ios/Pods folder)
      # -------------------------------------------------------------
      - name: Cache Pods
        uses: actions/cache@v3
        with:
          path: |
            ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Flutter Pub Get
        run: flutter pub get

      - name: Pod Install
        run: pod install
        working-directory: ios

      # Build your Flutter iOS app
      - name: Build iOS Release
        run: flutter build ios --release --no-codesign

      # Package into .ipa
      - name: Create Payload Directory
        run: mkdir Payload
        working-directory: build/ios/iphoneos

      - name: Move App into Payload
        run: mv Runner.app/ Payload
        working-directory: build/ios/iphoneos

      - name: Zip IPA
        run: zip -qq -r -9 FlutterIpaExport.ipa Payload
        working-directory: build/ios/iphoneos

      # Upload the artifact to a GitHub release
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/ios/iphoneos/FlutterIpaExport.ipa
          tag: v1.4
          overwrite: true
          body: "Built with auto-detected iOS SDK version"
